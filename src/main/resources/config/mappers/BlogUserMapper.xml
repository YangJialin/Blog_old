<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.gallin.blog.dao.BlogUserDao">
  <resultMap id="BaseResultMap" type="com.gallin.blog.entity.BlogUser">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="user_login" jdbcType="VARCHAR" property="userLogin" />
    <result column="user_pass" jdbcType="VARCHAR" property="userPass" />
    <result column="user_nicename" jdbcType="VARCHAR" property="userNicename" />
    <result column="user_email" jdbcType="VARCHAR" property="userEmail" />
    <result column="user_url" jdbcType="VARCHAR" property="userUrl" />
    <result column="user_registered" jdbcType="TIMESTAMP" property="userRegistered" />
    <result column="user_status" jdbcType="INTEGER" property="userStatus" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, user_login, user_pass, user_nicename, user_email, user_url, user_registered, 
    user_status
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from t_blog_user
    where user_email = #{userEmail,jdbcType=VARCHAR}
  </select>
  <select id="selectByEmail" parameterType="java.lang.String" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from t_blog_user
    where user_email = #{userEmail,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from t_blog_user
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="com.gallin.blog.entity.BlogUser">
    insert into t_blog_user (id, user_login, user_pass, 
      user_nicename, user_email, user_url, 
      user_registered, user_status)
    values (#{id,jdbcType=BIGINT}, #{userLogin,jdbcType=VARCHAR}, #{userPass,jdbcType=VARCHAR}, 
      #{userNicename,jdbcType=VARCHAR}, #{userEmail,jdbcType=VARCHAR}, #{userUrl,jdbcType=VARCHAR}, 
      #{userRegistered,jdbcType=TIMESTAMP}, #{userStatus,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.gallin.blog.entity.BlogUser">
    insert into t_blog_user
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="userLogin != null">
        user_login,
      </if>
      <if test="userPass != null">
        user_pass,
      </if>
      <if test="userNicename != null">
        user_nicename,
      </if>
      <if test="userEmail != null">
        user_email,
      </if>
      <if test="userUrl != null">
        user_url,
      </if>
      <if test="userRegistered != null">
        user_registered,
      </if>
      <if test="userStatus != null">
        user_status,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      <if test="userLogin != null">
        #{userLogin,jdbcType=VARCHAR},
      </if>
      <if test="userPass != null">
        #{userPass,jdbcType=VARCHAR},
      </if>
      <if test="userNicename != null">
        #{userNicename,jdbcType=VARCHAR},
      </if>
      <if test="userEmail != null">
        #{userEmail,jdbcType=VARCHAR},
      </if>
      <if test="userUrl != null">
        #{userUrl,jdbcType=VARCHAR},
      </if>
      <if test="userRegistered != null">
        #{userRegistered,jdbcType=TIMESTAMP},
      </if>
      <if test="userStatus != null">
        #{userStatus,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByExampleSelective" parameterType="map">
    update t_blog_user
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.userLogin != null">
        user_login = #{record.userLogin,jdbcType=VARCHAR},
      </if>
      <if test="record.userPass != null">
        user_pass = #{record.userPass,jdbcType=VARCHAR},
      </if>
      <if test="record.userNicename != null">
        user_nicename = #{record.userNicename,jdbcType=VARCHAR},
      </if>
      <if test="record.userEmail != null">
        user_email = #{record.userEmail,jdbcType=VARCHAR},
      </if>
      <if test="record.userUrl != null">
        user_url = #{record.userUrl,jdbcType=VARCHAR},
      </if>
      <if test="record.userRegistered != null">
        user_registered = #{record.userRegistered,jdbcType=TIMESTAMP},
      </if>
      <if test="record.userStatus != null">
        user_status = #{record.userStatus,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.gallin.blog.entity.BlogUser">
    update t_blog_user
    <set>
      <if test="userLogin != null">
        user_login = #{userLogin,jdbcType=VARCHAR},
      </if>
      <if test="userPass != null">
        user_pass = #{userPass,jdbcType=VARCHAR},
      </if>
      <if test="userNicename != null">
        user_nicename = #{userNicename,jdbcType=VARCHAR},
      </if>
      <if test="userEmail != null">
        user_email = #{userEmail,jdbcType=VARCHAR},
      </if>
      <if test="userUrl != null">
        user_url = #{userUrl,jdbcType=VARCHAR},
      </if>
      <if test="userRegistered != null">
        user_registered = #{userRegistered,jdbcType=TIMESTAMP},
      </if>
      <if test="userStatus != null">
        user_status = #{userStatus,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.gallin.blog.entity.BlogUser">
    update t_blog_user
    set user_login = #{userLogin,jdbcType=VARCHAR},
      user_pass = #{userPass,jdbcType=VARCHAR},
      user_nicename = #{userNicename,jdbcType=VARCHAR},
      user_email = #{userEmail,jdbcType=VARCHAR},
      user_url = #{userUrl,jdbcType=VARCHAR},
      user_registered = #{userRegistered,jdbcType=TIMESTAMP},
      user_status = #{userStatus,jdbcType=INTEGER}
    where id = #{id,jdbcType=BIGINT}
  </update>
</mapper>